#+TITLE: Bevy Block Game

* Idea 1: Blocks can only spawn a certain distance from another

I want two improvements
1. Blocks should spawn in on the side of the screen so the player doesn't immediatly die
2. Blocks should not spawn in the same direction and "path" as other blocks.

A block "path" is the path the block takes when it loops through the screen.

This is actually somewhat tricky to implement. In order to know where to spawn blocks I would need to be aware of what blocks already exist. I guess I could have a hashmap of current block spawning locations and then specify that a block should not spawn there. Or would a list be better?

If I had something like


Alright wait what I really want after talking it over with Willy is to use a set, or perhaps in rusts case, a hashset.
Then I can...
1. Make a random location and direction
2. Check to see if it is in the set +/- some level of tolerance
3. If it isn't then spawn it, if it is then don't spawn it

#+begin_src rust
use std::collections::HashSet;

#[derive(Eq, Hash, Display)]
enum Direction {
    Left,
    Right,
    Up,
    Down,
}

#[derive(Eq, Hash, Display)]
struct BlockData {
    spawn_position: (f32, f32),
    spawn_direction: Direction
}

fn main() {
    let mut blocks: HashSet<BlockData> = HashSet::new();
    blocks.insert(BlockData{spawn_position: (10, 10), spawn_direction: Right})
    blocks.insert(BlockData{spawn_position: (12, 10), spawn_direction: Left})

    println!("The blocks: {}", blocks);
}
#+end_src

#+RESULTS:
: error: Could not compile `cargoDFruiQ`.

* Idea 2: Blocks only spawn in at certain points

I came up with this idea after fruitlessly trying to make idea 1 work.
I ran into technical issue after technical issue and finally hit a wall after around 2 hours/2 days of work.

So my second idea is to just have preset places the blocks can spawn. Then we can play around with the direction randomness if we need to.

If we are going to control where the blocks spawn in at, then we are going to need to scale the spawn positions to the size of the screen.

God this might really involve some quite annoying math.

Wait so what problem does this solve
1. We can specify all blocks spawn at the edge positions
2. We could build a system where we know what direction other blocks are going and so spawn blocks that go in different directions


TBH I think I want all blocks on the sides to go east/west and all blocks on the top/bottom to go up and down.
Yeah I am just gonna do this and see if it works.

#+begin_src rust
const WINDOWHEIGHT: f32 = 900.0;
const WINDOWWIDTH: f32 = 1000.0;


fn main() {

    // NOTE
    // I could be wrong about this, but I think that
    // the origin point of these blocks is the middle
    // Ill just run on this assumption for now
    let sprite_size_x = 80.0;
    let sprite_size_y = 80.0;


    // NOTE
    // I will still need some kind of global set of position that I can spawn at.


}
#+end_src

* Technical Notes

A hashset is like a hashmap but all the elements need to be unique.
This property needs to hold k1 == k2 -> hash(k1) == hash(k2).
So this means that all your data in this needs to implement Eq and Hash.
I think the default implementations should be good enough, needs testing.
